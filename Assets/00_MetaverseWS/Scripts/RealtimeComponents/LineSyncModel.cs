using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class LineSyncModel 
{
    [RealtimeProperty(1, true, true)]
    private bool _enabled;

    [RealtimeProperty(2, false,true)]
    private Vector3 _point0;

    [RealtimeProperty(3, false, true)]
    private Vector3 _point1;

    [RealtimeProperty(4, false, true)]
    private Color _color1;

    [RealtimeProperty(5,false, true)]
    private Color _color2;

    [RealtimeProperty(6, false, true)]
    private float _alpha1;

    [RealtimeProperty(7, false, true)]
    private float _alpha2;

   

}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class LineSyncModel : RealtimeModel {
    public UnityEngine.Vector3 point0 {
        get {
            return _point0Property.value;
        }
        set {
            if (_point0Property.value == value) return;
            _point0Property.value = value;
            InvalidateUnreliableLength();
            FirePoint0DidChange(value);
        }
    }
    
    public UnityEngine.Vector3 point1 {
        get {
            return _point1Property.value;
        }
        set {
            if (_point1Property.value == value) return;
            _point1Property.value = value;
            InvalidateUnreliableLength();
            FirePoint1DidChange(value);
        }
    }
    
    public UnityEngine.Color color1 {
        get {
            return _color1Property.value;
        }
        set {
            if (_color1Property.value == value) return;
            _color1Property.value = value;
            InvalidateUnreliableLength();
            FireColor1DidChange(value);
        }
    }
    
    public UnityEngine.Color color2 {
        get {
            return _color2Property.value;
        }
        set {
            if (_color2Property.value == value) return;
            _color2Property.value = value;
            InvalidateUnreliableLength();
            FireColor2DidChange(value);
        }
    }
    
    public float alpha1 {
        get {
            return _alpha1Property.value;
        }
        set {
            if (_alpha1Property.value == value) return;
            _alpha1Property.value = value;
            InvalidateUnreliableLength();
            FireAlpha1DidChange(value);
        }
    }
    
    public float alpha2 {
        get {
            return _alpha2Property.value;
        }
        set {
            if (_alpha2Property.value == value) return;
            _alpha2Property.value = value;
            InvalidateUnreliableLength();
            FireAlpha2DidChange(value);
        }
    }
    
    public bool enabled {
        get {
            return _enabledProperty.value;
        }
        set {
            if (_enabledProperty.value == value) return;
            _enabledProperty.value = value;
            InvalidateReliableLength();
            FireEnabledDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(LineSyncModel model, T value);
    public event PropertyChangedHandler<bool> enabledDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> point0DidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> point1DidChange;
    public event PropertyChangedHandler<UnityEngine.Color> color1DidChange;
    public event PropertyChangedHandler<UnityEngine.Color> color2DidChange;
    public event PropertyChangedHandler<float> alpha1DidChange;
    public event PropertyChangedHandler<float> alpha2DidChange;
    
    public enum PropertyID : uint {
        Enabled = 1,
        Point0 = 2,
        Point1 = 3,
        Color1 = 4,
        Color2 = 5,
        Alpha1 = 6,
        Alpha2 = 7,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _enabledProperty;
    
    private UnreliableProperty<UnityEngine.Vector3> _point0Property;
    
    private UnreliableProperty<UnityEngine.Vector3> _point1Property;
    
    private UnreliableProperty<UnityEngine.Color> _color1Property;
    
    private UnreliableProperty<UnityEngine.Color> _color2Property;
    
    private UnreliableProperty<float> _alpha1Property;
    
    private UnreliableProperty<float> _alpha2Property;
    
    #endregion
    
    public LineSyncModel() : base(null) {
        _enabledProperty = new ReliableProperty<bool>(1, _enabled);
        _point0Property = new UnreliableProperty<UnityEngine.Vector3>(2, _point0);
        _point1Property = new UnreliableProperty<UnityEngine.Vector3>(3, _point1);
        _color1Property = new UnreliableProperty<UnityEngine.Color>(4, _color1);
        _color2Property = new UnreliableProperty<UnityEngine.Color>(5, _color2);
        _alpha1Property = new UnreliableProperty<float>(6, _alpha1);
        _alpha2Property = new UnreliableProperty<float>(7, _alpha2);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _enabledProperty.UnsubscribeCallback();
    }
    
    private void FireEnabledDidChange(bool value) {
        try {
            enabledDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePoint0DidChange(UnityEngine.Vector3 value) {
        try {
            point0DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePoint1DidChange(UnityEngine.Vector3 value) {
        try {
            point1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColor1DidChange(UnityEngine.Color value) {
        try {
            color1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColor2DidChange(UnityEngine.Color value) {
        try {
            color2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAlpha1DidChange(float value) {
        try {
            alpha1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAlpha2DidChange(float value) {
        try {
            alpha2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _enabledProperty.WriteLength(context);
        length += _point0Property.WriteLength(context);
        length += _point1Property.WriteLength(context);
        length += _color1Property.WriteLength(context);
        length += _color2Property.WriteLength(context);
        length += _alpha1Property.WriteLength(context);
        length += _alpha2Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _enabledProperty.Write(stream, context);
        writes |= _point0Property.Write(stream, context);
        writes |= _point1Property.Write(stream, context);
        writes |= _color1Property.Write(stream, context);
        writes |= _color2Property.Write(stream, context);
        writes |= _alpha1Property.Write(stream, context);
        writes |= _alpha2Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Enabled: {
                    changed = _enabledProperty.Read(stream, context);
                    if (changed) FireEnabledDidChange(enabled);
                    break;
                }
                case (uint) PropertyID.Point0: {
                    changed = _point0Property.Read(stream, context);
                    if (changed) FirePoint0DidChange(point0);
                    break;
                }
                case (uint) PropertyID.Point1: {
                    changed = _point1Property.Read(stream, context);
                    if (changed) FirePoint1DidChange(point1);
                    break;
                }
                case (uint) PropertyID.Color1: {
                    changed = _color1Property.Read(stream, context);
                    if (changed) FireColor1DidChange(color1);
                    break;
                }
                case (uint) PropertyID.Color2: {
                    changed = _color2Property.Read(stream, context);
                    if (changed) FireColor2DidChange(color2);
                    break;
                }
                case (uint) PropertyID.Alpha1: {
                    changed = _alpha1Property.Read(stream, context);
                    if (changed) FireAlpha1DidChange(alpha1);
                    break;
                }
                case (uint) PropertyID.Alpha2: {
                    changed = _alpha2Property.Read(stream, context);
                    if (changed) FireAlpha2DidChange(alpha2);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _enabled = enabled;
        _point0 = point0;
        _point1 = point1;
        _color1 = color1;
        _color2 = color2;
        _alpha1 = alpha1;
        _alpha2 = alpha2;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
