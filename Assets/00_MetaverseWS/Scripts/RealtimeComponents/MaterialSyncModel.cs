using Normal.Realtime;
using Normal.Realtime.Serialization;



[RealtimeModel(createMetaModel: true)]
public partial class MaterialSyncModel
{
    [RealtimeProperty(1, false, true)]
    private int _materialIndex;

    [RealtimeProperty(2, false, true)]
    private int _textureIndex;

    [RealtimeProperty(3,false, true)]
    private float _hoverOverlayStrength;

    [RealtimeProperty(4, false, true)]
    private bool _playVideo;

    [RealtimeProperty(5, false, true)]
    private float _videoFrame;

    
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class MaterialSyncModel : RealtimeModel {
    public int materialIndex {
        get {
            return _materialIndexProperty.value;
        }
        set {
            if (_materialIndexProperty.value == value) return;
            _materialIndexProperty.value = value;
            InvalidateUnreliableLength();
            FireMaterialIndexDidChange(value);
        }
    }
    
    public int textureIndex {
        get {
            return _textureIndexProperty.value;
        }
        set {
            if (_textureIndexProperty.value == value) return;
            _textureIndexProperty.value = value;
            InvalidateUnreliableLength();
            FireTextureIndexDidChange(value);
        }
    }
    
    public float hoverOverlayStrength {
        get {
            return _hoverOverlayStrengthProperty.value;
        }
        set {
            if (_hoverOverlayStrengthProperty.value == value) return;
            _hoverOverlayStrengthProperty.value = value;
            InvalidateUnreliableLength();
            FireHoverOverlayStrengthDidChange(value);
        }
    }
    
    public bool playVideo {
        get {
            return _playVideoProperty.value;
        }
        set {
            if (_playVideoProperty.value == value) return;
            _playVideoProperty.value = value;
            InvalidateUnreliableLength();
            FirePlayVideoDidChange(value);
        }
    }
    
    public float videoFrame {
        get {
            return _videoFrameProperty.value;
        }
        set {
            if (_videoFrameProperty.value == value) return;
            _videoFrameProperty.value = value;
            InvalidateUnreliableLength();
            FireVideoFrameDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(MaterialSyncModel model, T value);
    public event PropertyChangedHandler<int> materialIndexDidChange;
    public event PropertyChangedHandler<int> textureIndexDidChange;
    public event PropertyChangedHandler<float> hoverOverlayStrengthDidChange;
    public event PropertyChangedHandler<bool> playVideoDidChange;
    public event PropertyChangedHandler<float> videoFrameDidChange;
    
    public enum PropertyID : uint {
        MaterialIndex = 1,
        TextureIndex = 2,
        HoverOverlayStrength = 3,
        PlayVideo = 4,
        VideoFrame = 5,
    }
    
    #region Properties
    
    private UnreliableProperty<int> _materialIndexProperty;
    
    private UnreliableProperty<int> _textureIndexProperty;
    
    private UnreliableProperty<float> _hoverOverlayStrengthProperty;
    
    private UnreliableProperty<bool> _playVideoProperty;
    
    private UnreliableProperty<float> _videoFrameProperty;
    
    #endregion
    
    public MaterialSyncModel() : base(new MetaModel()) {
        _materialIndexProperty = new UnreliableProperty<int>(1, _materialIndex);
        _textureIndexProperty = new UnreliableProperty<int>(2, _textureIndex);
        _hoverOverlayStrengthProperty = new UnreliableProperty<float>(3, _hoverOverlayStrength);
        _playVideoProperty = new UnreliableProperty<bool>(4, _playVideo);
        _videoFrameProperty = new UnreliableProperty<float>(5, _videoFrame);
    }
    
    private void FireMaterialIndexDidChange(int value) {
        try {
            materialIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTextureIndexDidChange(int value) {
        try {
            textureIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHoverOverlayStrengthDidChange(float value) {
        try {
            hoverOverlayStrengthDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlayVideoDidChange(bool value) {
        try {
            playVideoDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireVideoFrameDidChange(float value) {
        try {
            videoFrameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = MetaModelWriteLength(context);
        length += _materialIndexProperty.WriteLength(context);
        length += _textureIndexProperty.WriteLength(context);
        length += _hoverOverlayStrengthProperty.WriteLength(context);
        length += _playVideoProperty.WriteLength(context);
        length += _videoFrameProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        WriteMetaModel(stream, context);
        
        var writes = false;
        writes |= _materialIndexProperty.Write(stream, context);
        writes |= _textureIndexProperty.Write(stream, context);
        writes |= _hoverOverlayStrengthProperty.Write(stream, context);
        writes |= _playVideoProperty.Write(stream, context);
        writes |= _videoFrameProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case MetaModel.ReservedPropertyID: {
                    ReadMetaModel(stream, context);
                    break;
                }
                case (uint) PropertyID.MaterialIndex: {
                    changed = _materialIndexProperty.Read(stream, context);
                    if (changed) FireMaterialIndexDidChange(materialIndex);
                    break;
                }
                case (uint) PropertyID.TextureIndex: {
                    changed = _textureIndexProperty.Read(stream, context);
                    if (changed) FireTextureIndexDidChange(textureIndex);
                    break;
                }
                case (uint) PropertyID.HoverOverlayStrength: {
                    changed = _hoverOverlayStrengthProperty.Read(stream, context);
                    if (changed) FireHoverOverlayStrengthDidChange(hoverOverlayStrength);
                    break;
                }
                case (uint) PropertyID.PlayVideo: {
                    changed = _playVideoProperty.Read(stream, context);
                    if (changed) FirePlayVideoDidChange(playVideo);
                    break;
                }
                case (uint) PropertyID.VideoFrame: {
                    changed = _videoFrameProperty.Read(stream, context);
                    if (changed) FireVideoFrameDidChange(videoFrame);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _materialIndex = materialIndex;
        _textureIndex = textureIndex;
        _hoverOverlayStrength = hoverOverlayStrength;
        _playVideo = playVideo;
        _videoFrame = videoFrame;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
